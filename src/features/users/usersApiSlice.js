import {
    createSelector,
    createEntityAdapter
} from "@reduxjs/toolkit";
import { apiSlice } from "../../app/api/apiSlice";

// Creating an entity adapter for managing user data
const usersAdapter = createEntityAdapter({});

// Initial state using the entity adapter
const initialState = usersAdapter.getInitialState();

// Injecting endpoints for user-related API operations
export const usersApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        // Query endpoint for fetching users
        getUsers: builder.query({
            query: () => ({
                url: '/users',
                validateStatus: (response, result) => {
                    return response.status === 200 && !result.isError;
                },
            }),
            // Transforming the response data and updating state using the entity adapter
            transformResponse: responseData => {
                const loadedUsers = responseData.map(user => {
                    user.id = user._id;
                    return user;
                });
                return usersAdapter.setAll(initialState, loadedUsers);
            },
            // Providing tags for invalidation
            providesTags: (result, error, arg) => {
                if (result?.ids) {
                    return [
                        { type: 'User', id: 'LIST' },
                        ...result.ids.map(id => ({ type: 'User', id }))
                    ];
                } else return [{ type: 'User', id: 'LIST' }];
            }
        }),
        // Mutation endpoint for adding a new user
        addNewUser: builder.mutation({
            query: initialUserData => ({
                url: '/users',
                method: 'POST',
                body: {
                    ...initialUserData,
                }
            }),
            // Invalidating tags on successful mutation
            invalidatesTags: [
                { type: 'User', id: "LIST" }
            ]
        }),
        // Mutation endpoint for updating user data
        updateUser: builder.mutation({
            query: initialUserData => ({
                url: '/users',
                method: 'PATCH',
                body: {
                    ...initialUserData,
                }
            }),
            // Invalidating tags based on the mutation result
            invalidatesTags: (result, error, arg) => [
                { type: 'User', id: arg.id }
            ]
        }),
        // Mutation endpoint for deleting a user
        deleteUser: builder.mutation({
            query: ({ id }) => ({
                url: `/users`,
                method: 'DELETE',
                body: { id }
            }),
            // Invalidating tags based on the mutation result
            invalidatesTags: (result, error, arg) => [
                { type: 'User', id: arg.id }
            ]
        }),
    }),
});

// Exporting hooks generated by the apiSlice for querying and mutating user data
export const {
    useGetUsersQuery,
    useAddNewUserMutation,
    useUpdateUserMutation,
    useDeleteUserMutation,
} = usersApiSlice;

// Selector for retrieving the query result object
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select();

// Creating a memoized selector for selecting user data from the state
const selectUsersData = createSelector(
    selectUsersResult,
    usersResult => usersResult.data // normalized state object with ids & entities
);

// Creating selectors using the entity adapter's getSelectors function
export const {
    selectAll: selectAllUsers,
    selectById: selectUserById,
    selectIds: selectUserIds
} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState);
